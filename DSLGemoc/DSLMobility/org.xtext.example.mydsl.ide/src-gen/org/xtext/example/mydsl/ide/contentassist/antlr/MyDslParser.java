/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getSourceMenuAccess().getAlternatives(), "rule__SourceMenu__Alternatives");
			builder.put(grammarAccess.getSourcePresAccess().getAlternatives(), "rule__SourcePres__Alternatives");
			builder.put(grammarAccess.getSourceLogoAccess().getAlternatives(), "rule__SourceLogo__Alternatives");
			builder.put(grammarAccess.getSourceNameAccess().getAlternatives(), "rule__SourceName__Alternatives");
			builder.put(grammarAccess.getPageAccess().getGroup(), "rule__Page__Group__0");
			builder.put(grammarAccess.getPageAccess().getGroup_15(), "rule__Page__Group_15__0");
			builder.put(grammarAccess.getPageAccess().getGroup_16(), "rule__Page__Group_16__0");
			builder.put(grammarAccess.getPageAccess().getGroup_25(), "rule__Page__Group_25__0");
			builder.put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
			builder.put(grammarAccess.getPageAccess().getGeolocalisationAssignment_0(), "rule__Page__GeolocalisationAssignment_0");
			builder.put(grammarAccess.getPageAccess().getNameAssignment_2(), "rule__Page__NameAssignment_2");
			builder.put(grammarAccess.getPageAccess().getDescriptionAssignment_4(), "rule__Page__DescriptionAssignment_4");
			builder.put(grammarAccess.getPageAccess().getMailAssignment_6(), "rule__Page__MailAssignment_6");
			builder.put(grammarAccess.getPageAccess().getTelephoneAssignment_8(), "rule__Page__TelephoneAssignment_8");
			builder.put(grammarAccess.getPageAccess().getHeure_ouvertureAssignment_10(), "rule__Page__Heure_ouvertureAssignment_10");
			builder.put(grammarAccess.getPageAccess().getHeure_fermetureAssignment_12(), "rule__Page__Heure_fermetureAssignment_12");
			builder.put(grammarAccess.getPageAccess().getNb_PersAssignment_14(), "rule__Page__Nb_PersAssignment_14");
			builder.put(grammarAccess.getPageAccess().getPort_backAssignment_15_1(), "rule__Page__Port_backAssignment_15_1");
			builder.put(grammarAccess.getPageAccess().getPort_frontAssignment_16_1(), "rule__Page__Port_frontAssignment_16_1");
			builder.put(grammarAccess.getPageAccess().getMenuAssignment_18(), "rule__Page__MenuAssignment_18");
			builder.put(grammarAccess.getPageAccess().getPresentationAssignment_20(), "rule__Page__PresentationAssignment_20");
			builder.put(grammarAccess.getPageAccess().getLogoAssignment_22(), "rule__Page__LogoAssignment_22");
			builder.put(grammarAccess.getPageAccess().getSourceAssignment_24(), "rule__Page__SourceAssignment_24");
			builder.put(grammarAccess.getPageAccess().getSourceAssignment_25_1(), "rule__Page__SourceAssignment_25_1");
			builder.put(grammarAccess.getSourceAccess().getNameAssignment_1(), "rule__Source__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
