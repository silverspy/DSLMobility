/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import dSLMobility.DSLMobilityPackage;
import dSLMobility.Page;
import dSLMobility.Source;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DSLMobilityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DSLMobilityPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case DSLMobilityPackage.SOURCE:
				sequence_Source(context, (Source) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (
	 *         geolocalisation?='geolocalisation'? 
	 *         name=EString 
	 *         description=EString 
	 *         mail=EString 
	 *         telephone=EString 
	 *         menu=SourceMenu 
	 *         Selection=SourceSelection 
	 *         heure_ouverture=EInt? 
	 *         heure_fermeture=EInt? 
	 *         nb_Pers=EInt? 
	 *         presentation=SourcePres 
	 *         logo=SourceLogo 
	 *         source+=Source 
	 *         source+=Source* 
	 *         Port_back=EInt? 
	 *         Port_front=EInt?
	 *     )
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Source returns Source
	 *
	 * Constraint:
	 *     name=SourceName?
	 */
	protected void sequence_Source(ISerializationContext context, Source semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
