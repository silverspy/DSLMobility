/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceSourceParserRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceSourceParserRuleCall_4_1_0 = (RuleCall)cSourceAssignment_4_1.eContents().get(0);
		
		//Page:
		//	'Page'
		//	name=EString
		//	'source' source+=Source ("," source+=Source)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Page' name=EString 'source' source+=Source ("," source+=Source)*
		public Group getGroup() { return cGroup; }
		
		//'Page'
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'source'
		public Keyword getSourceKeyword_2() { return cSourceKeyword_2; }
		
		//source+=Source
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//Source
		public RuleCall getSourceSourceParserRuleCall_3_0() { return cSourceSourceParserRuleCall_3_0; }
		
		//("," source+=Source)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//source+=Source
		public Assignment getSourceAssignment_4_1() { return cSourceAssignment_4_1; }
		
		//Source
		public RuleCall getSourceSourceParserRuleCall_4_1_0() { return cSourceSourceParserRuleCall_4_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSourceNameEnumRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Source:
		//	{Source} name=SourceName?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Source} name=SourceName?
		public Group getGroup() { return cGroup; }
		
		//{Source}
		public Action getSourceAction_0() { return cSourceAction_0; }
		
		//name=SourceName?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SourceName
		public RuleCall getNameSourceNameEnumRuleCall_1_0() { return cNameSourceNameEnumRuleCall_1_0; }
	}
	
	public class SourceNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SourceName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTisseoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTisseoTisseoKeyword_0_0 = (Keyword)cTisseoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGoogleMapEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGoogleMapGoogleMapKeyword_1_0 = (Keyword)cGoogleMapEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SourceName:
		//	Tisseo | GoogleMap;
		public EnumRule getRule() { return rule; }
		
		//Tisseo | GoogleMap
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Tisseo
		public EnumLiteralDeclaration getTisseoEnumLiteralDeclaration_0() { return cTisseoEnumLiteralDeclaration_0; }
		
		//'Tisseo'
		public Keyword getTisseoTisseoKeyword_0_0() { return cTisseoTisseoKeyword_0_0; }
		
		//GoogleMap
		public EnumLiteralDeclaration getGoogleMapEnumLiteralDeclaration_1() { return cGoogleMapEnumLiteralDeclaration_1; }
		
		//'GoogleMap'
		public Keyword getGoogleMapGoogleMapKeyword_1_0() { return cGoogleMapGoogleMapKeyword_1_0; }
	}
	
	private final PageElements pPage;
	private final EStringElements pEString;
	private final SourceElements pSource;
	private final SourceNameElements eSourceName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPage = new PageElements();
		this.pEString = new EStringElements();
		this.pSource = new SourceElements();
		this.eSourceName = new SourceNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Page:
	//	'Page'
	//	name=EString
	//	'source' source+=Source ("," source+=Source)*;
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Source:
	//	{Source} name=SourceName?;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//enum SourceName:
	//	Tisseo | GoogleMap;
	public SourceNameElements getSourceNameAccess() {
		return eSourceName;
	}
	
	public EnumRule getSourceNameRule() {
		return getSourceNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
